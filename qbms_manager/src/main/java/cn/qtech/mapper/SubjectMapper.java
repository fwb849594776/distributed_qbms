package cn.qtech.mapper;

import cn.qtech.domain.Subject;
import cn.qtech.domain.SubjectWithBLOBs;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface SubjectMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int deleteByPrimaryKey(String subjectId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int insert(SubjectWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int insertSelective(SubjectWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    SubjectWithBLOBs selectByPrimaryKey(String subjectId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int updateByPrimaryKeySelective(SubjectWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int updateByPrimaryKeyWithBLOBs(SubjectWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table subject
     *
     * @mbggenerated Thu Mar 23 17:14:14 CST 2017
     */
    int updateByPrimaryKey(Subject record);

    List<SubjectWithBLOBs> queryAll();

    List<SubjectWithBLOBs> queryByCategory(@Param("categoryId") String categoryId);

    List<SubjectWithBLOBs> queryByUser(@Param("userId") String userId);

    List<SubjectWithBLOBs> queryByDifficulty(@Param("id") String id);

    boolean updateBasic(@Param("name") String name, @Param("subjectCategoryId") String subjectCategoryId, @Param("subjectDifficultyId") String subjectDifficultyId, @Param("subjectId") String subjectId);


    boolean updateContent(@Param("content") String content, @Param("subjectId") String subjectId);

    boolean updateAnswer(@Param("answer") String answer, @Param("subjectId") String subjectId);

    List<SubjectWithBLOBs> querySubjectsByBatch(@Param("ids") List<String> realIdList);

    int getCountByCategoryAndDifficulty(@Param("categoryId") String categoryId, @Param("difficultyId") String difficultyId);

    List<SubjectWithBLOBs> queryAllByCategoryAndDifficulty(@Param("categoryId") String categoryId, @Param("difficultyId") String difficultyId);
}