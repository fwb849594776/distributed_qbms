package cn.qtech.mapper;

import cn.qtech.domain.UserPaper;
import cn.qtech.domain.UserPaperWithBLOBs;
import org.apache.ibatis.annotations.Param;

import java.util.Date;
import java.util.List;

public interface UserPaperMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int insert(UserPaperWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int insertSelective(UserPaperWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    UserPaperWithBLOBs selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int updateByPrimaryKeySelective(UserPaperWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int updateByPrimaryKeyWithBLOBs(UserPaperWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_paper
     *
     * @mbggenerated Tue Apr 25 13:52:14 CST 2017
     */
    int updateByPrimaryKey(UserPaper record);

    List<UserPaperWithBLOBs> queryAllByUserIdAndStatus(@Param("userId") String userId, @Param("status") int status);

    int modifyUserPaperForCommit(@Param("userPaper") UserPaperWithBLOBs userPaper);

    int insertUserPapersByBatch(@Param("userPapers") List<UserPaperWithBLOBs> userPapers);

    boolean changeUserPaperStatus(@Param("startTime") Date date, @Param("status") int value);

    boolean changeUserPaperStatusToCommited(@Param("now") Date date, @Param("status") int value);

    List<UserPaperWithBLOBs> queryUserPaperByManagerAndStatus(@Param("managerId") String managerId, @Param("status") int status);

    int grade(@Param("userPaperId") String userPaperId, @Param("score") int score, @Param("status") int value);

    boolean modifyUserPaperStatusById(@Param("userPaperId") String userPaperId, @Param("status") int value);

    int changeFinishedExams(@Param("currentStatus") int currentStatus, @Param("finishedStatus") int value);
}